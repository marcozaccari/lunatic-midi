#include <stdio.h>
#include <fcntl.h>   // File Control Definitions
#include <unistd.h>  // UNIX Standard Definitions
#include <errno.h>   // ERROR Number Definitions
#include <termios.h>
#include <stdbool.h>
#include <stdint.h>
#include "led_monitor.h"

#define LEDS_COUNT 60

int uart;

uint8_t framebuffer[LEDS_COUNT];
uint8_t framebuffer_old[LEDS_COUNT];


bool led_monitor_open() {
        struct termios SerialPortSettings;

	uart = open("/dev/ttyS0", O_RDWR | O_NOCTTY | O_NONBLOCK | O_SYNC);  // no canonical

	if(uart == -1) {
		printf("ERROR cannot open ttyS0\n");
		return false;
	}

        tcgetattr(uart, &SerialPortSettings);  // get the current attributes of the port

	cfsetispeed(&SerialPortSettings,B115200);  // read speed
	cfsetospeed(&SerialPortSettings,B115200);  // write speed

	// 8N1 mode
	SerialPortSettings.c_cflag &= ~PARENB;  // disables parity enabling bit PARENB
	SerialPortSettings.c_cflag &= ~CSTOPB;  // CSTOPB = 2 stop bits, here it is cleared so 1 stop bit
	SerialPortSettings.c_cflag &= ~CSIZE;  // clears the mask for setting the data size
	SerialPortSettings.c_cflag |=  CS8;  // set the data bits = 8
	SerialPortSettings.c_cflag &= ~CRTSCTS;  // no hardware flow control
	SerialPortSettings.c_cflag &= ~IGNBRK;  // disable break processing
	SerialPortSettings.c_cflag |= CREAD | CLOCAL;  // enable receiver, ignore modem control lines
	SerialPortSettings.c_oflag = 0; // no remapping, no delays
	//SerialPortSettings.c_oflag &= ~OPOST; // no output processing

	SerialPortSettings.c_iflag &= ~(IXON | IXOFF | IXANY);  // disable XON/XOFF flow control both i/p and o/p
	SerialPortSettings.c_iflag &= ~(ICANON | ECHO | ECHOE | ISIG);  // non cannonical mode

	SerialPortSettings.c_lflag = 0;  // no signaling chars, no echo, no canonical processing
	
	// setting timeouts (valid in blocking mode only)
	SerialPortSettings.c_cc[VMIN] = 1;
	SerialPortSettings.c_cc[VTIME] = 5;

	if ((tcsetattr(uart, TCSANOW, &SerialPortSettings)) != 0) {  // set the attributes to the termios structure
		printf("ERROR setting serial attributes\n");
		return false;
	}
	
	tcflush(uart, TCIFLUSH);  // discards old data in the rx buffer


	for (int x=0; x < LEDS_COUNT; x++) {
		framebuffer[x] = 0;
		framebuffer_old[x] = 0;
	}

	// reset leds controller
	char buff[1];
	int ret;

	buff[0] = 0xFF;
	ret = write(uart, buff, 1);

	return (ret == 1);
}

bool led_monitor_close() {
	close(uart);
	return true;
}


bool led_monitor_do() {
	uint8_t buff[256];
	int ret;
	int buff_len;

	buff_len = 0;
	for (int x=0; x < LEDS_COUNT; x++) {
		if (framebuffer[x] != framebuffer_old[x]) {
			buff[buff_len] = (uint8_t)x | 0x80;
			buff_len++;
			buff[buff_len] = framebuffer[x];
			buff_len++;
			
			framebuffer_old[x] = framebuffer[x];
		}
	}

	if (buff_len) {
		ret = write(uart, buff, buff_len);
		return (ret == buff_len);
	}

	return true;
}


void led_monitor_fill(uint8_t color) {
	for (int x=0; x < LEDS_COUNT; x++)
		framebuffer[x] = color;
}

void led_monitor_set(unsigned int index, uint8_t color) {
	if (index >= LEDS_COUNT)
		return;

	framebuffer[index] = color;
}