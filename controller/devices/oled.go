package devices

import (
	"fmt"
	"time"

	"periph.io/x/conn/v3/gpio"
	"periph.io/x/conn/v3/gpio/gpioreg"
	"periph.io/x/conn/v3/physic"
	"periph.io/x/conn/v3/spi"
	"periph.io/x/conn/v3/spi/spireg"
	"periph.io/x/host/v3"
)

const (
	// Dimensioni display ER-OLEDM015-2W con SSD1309 (128x64 pixel)
	DisplayWidth  = 128
	DisplayHeight = 64

	// Comandi SSD1309
	cmdSetContrast      = 0x81
	cmdEntireDisplayOn  = 0xA5
	cmdNormalDisplay    = 0xA6
	cmdInvertDisplay    = 0xA7
	cmdDisplayOff       = 0xAE
	cmdDisplayOn        = 0xAF
	cmdSetDisplayOffset = 0xD3
	cmdSetComPins       = 0xDA
	cmdSetVcomDeselect  = 0xDB
	cmdSetDisplayClock  = 0xD5
	cmdSetPrecharge     = 0xD9
	cmdSetMultiplex     = 0xA8
	cmdSetLowColumn     = 0x00
	cmdSetHighColumn    = 0x10
	cmdSetStartLine     = 0x40
	cmdMemoryMode       = 0x20
	cmdColumnAddr       = 0x21
	cmdPageAddr         = 0x22
	cmdSegRemap         = 0xA1
	cmdComScanDec       = 0xC8
	cmdChargePump       = 0x8D
)

// Display rappresenta il display OLED
type Display struct {
	spiDev  spi.Conn
	dcPin   gpio.PinOut
	rstPin  gpio.PinOut
	fb      []byte // Framebuffer locale (1024 byte per 128x64)
	cursorX int    // Cursore X per print
	cursorY int    // Cursore Y per print
}

// OledConfig contiene la configurazione per il display
type OledConfig struct {
	SPIBus   string           // es. "SPI0.0"
	DCPin    string           // es. "GPIO25" (Data/Command)
	RSTPin   string           // es. "GPIO24" (Reset)
	SPISpeed physic.Frequency // es. 8*physic.MegaHertz
}

// NewOled crea una nuova istanza del display
func NewOled(cfg OledConfig) (*Display, error) {
	// Inizializza periph.io
	if _, err := host.Init(); err != nil {
		return nil, fmt.Errorf("init host: %w", err)
	}

	// Valori di default
	if cfg.SPIBus == "" {
		cfg.SPIBus = "SPI0.0"
	}
	if cfg.DCPin == "" {
		cfg.DCPin = "GPIO27"
	}
	if cfg.RSTPin == "" {
		cfg.RSTPin = "GPIO22"
	}
	if cfg.SPISpeed == 0 {
		cfg.SPISpeed = 8 * physic.MegaHertz
	}

	// Apri bus SPI
	spiPort, err := spireg.Open(cfg.SPIBus)
	if err != nil {
		return nil, fmt.Errorf("open SPI: %w", err)
	}

	// Configura SPI
	spiConn, err := spiPort.Connect(cfg.SPISpeed, spi.Mode0, 8)
	if err != nil {
		return nil, fmt.Errorf("connect SPI: %w", err)
	}

	// Configura pin DC
	dcPin := gpioreg.ByName(cfg.DCPin)
	if dcPin == nil {
		return nil, fmt.Errorf("pin DC %s non trovato", cfg.DCPin)
	}

	// Configura pin RST
	rstPin := gpioreg.ByName(cfg.RSTPin)
	if rstPin == nil {
		return nil, fmt.Errorf("pin RST %s non trovato", cfg.RSTPin)
	}

	d := &Display{
		spiDev:  spiConn,
		dcPin:   dcPin,
		rstPin:  rstPin,
		fb:      make([]byte, (DisplayWidth*DisplayHeight)/8), // 1 bit per pixel
		cursorX: 0,
		cursorY: 0,
	}

	return d, nil
}

// Init inizializza il display
func (d *Display) Init() error {
	// Reset hardware
	if err := d.rstPin.Out(gpio.High); err != nil {
		return err
	}
	time.Sleep(10 * time.Millisecond)
	if err := d.rstPin.Out(gpio.Low); err != nil {
		return err
	}
	time.Sleep(10 * time.Millisecond)
	if err := d.rstPin.Out(gpio.High); err != nil {
		return err
	}
	time.Sleep(100 * time.Millisecond)

	// Sequenza inizializzazione SSD1309
	cmds := [][]byte{
		{cmdDisplayOff},             // Display off
		{cmdSetDisplayClock, 0x80},  // Clock divide ratio
		{cmdSetMultiplex, 0x3F},     // Multiplex ratio (64)
		{cmdSetDisplayOffset, 0x00}, // Display offset
		{cmdSetStartLine | 0x00},    // Start line 0
		{cmdChargePump, 0x14},       // Enable charge pump
		{cmdMemoryMode, 0x00},       // Horizontal addressing mode
		{cmdSegRemap},               // Segment remap
		{cmdComScanDec},             // COM scan direction
		{cmdSetComPins, 0x12},       // COM pins configuration
		{cmdSetContrast, 0x7F},      // Contrasto medio
		{cmdSetPrecharge, 0xF1},     // Pre-charge period
		{cmdSetVcomDeselect, 0x40},  // VCOM deselect level
		{cmdNormalDisplay},          // Normal display (non invertito)
		{cmdDisplayOn},              // Display on
	}

	for _, cmd := range cmds {
		if err := d.writeCmd(cmd); err != nil {
			return err
		}
	}

	d.Clear()
	return d.Refresh()
}

// writeCmd scrive un comando al display
func (d *Display) writeCmd(cmd []byte) error {
	if err := d.dcPin.Out(gpio.Low); err != nil {
		return err
	}
	return d.spiDev.Tx(cmd, nil)
}

// writeData scrive dati al display
func (d *Display) writeData(data []byte) error {
	if err := d.dcPin.Out(gpio.High); err != nil {
		return err
	}
	return d.spiDev.Tx(data, nil)
}

// On accende il display
func (d *Display) On() error {
	return d.writeCmd([]byte{cmdDisplayOn})
}

// Off spegne il display
func (d *Display) Off() error {
	return d.writeCmd([]byte{cmdDisplayOff})
}

// SetContrast imposta il contrasto (0-255)
func (d *Display) SetContrast(level uint8) error {
	return d.writeCmd([]byte{cmdSetContrast, level})
}

// Invert inverte i colori del display
func (d *Display) Invert(invert bool) error {
	if invert {
		return d.writeCmd([]byte{cmdInvertDisplay})
	}
	return d.writeCmd([]byte{cmdNormalDisplay})
}

// Clear pulisce il framebuffer
func (d *Display) Clear() {
	for i := range d.fb {
		d.fb[i] = 0
	}
}

// Fill riempie il framebuffer
func (d *Display) Fill() {
	for i := range d.fb {
		d.fb[i] = 0xFF
	}
}

// SetPixel imposta un pixel nel framebuffer (on=true accende il pixel)
func (d *Display) SetPixel(x, y int, on bool) {
	if x < 0 || x >= DisplayWidth || y < 0 || y >= DisplayHeight {
		return
	}

	// Calcola posizione nel framebuffer
	// Il display Ã¨ organizzato in pagine di 8 pixel verticali
	page := y / 8
	bit := uint(y % 8)
	idx := page*DisplayWidth + x

	if on {
		d.fb[idx] |= (1 << bit)
	} else {
		d.fb[idx] &^= (1 << bit)
	}
}

// GetPixel legge lo stato di un pixel dal framebuffer
func (d *Display) GetPixel(x, y int) bool {
	if x < 0 || x >= DisplayWidth || y < 0 || y >= DisplayHeight {
		return false
	}

	page := y / 8
	bit := uint(y % 8)
	idx := page*DisplayWidth + x

	return (d.fb[idx] & (1 << bit)) != 0
}

// DrawRect disegna un rettangolo pieno
func (d *Display) DrawRect(x, y, w, h int, on bool) {
	for dy := 0; dy < h; dy++ {
		for dx := 0; dx < w; dx++ {
			d.SetPixel(x+dx, y+dy, on)
		}
	}
}

// DrawRectOutline disegna il bordo di un rettangolo
func (d *Display) DrawRectOutline(x, y, w, h int, on bool) {
	// Linee orizzontali
	for dx := 0; dx < w; dx++ {
		d.SetPixel(x+dx, y, on)
		d.SetPixel(x+dx, y+h-1, on)
	}
	// Linee verticali
	for dy := 0; dy < h; dy++ {
		d.SetPixel(x, y+dy, on)
		d.SetPixel(x+w-1, y+dy, on)
	}
}

// DrawLine disegna una linea orizzontale
func (d *Display) DrawHLine(x, y, w int, on bool) {
	for dx := 0; dx < w; dx++ {
		d.SetPixel(x+dx, y, on)
	}
}

// DrawVLine disegna una linea verticale
func (d *Display) DrawVLine(x, y, h int, on bool) {
	for dy := 0; dy < h; dy++ {
		d.SetPixel(x, y+dy, on)
	}
}

// Refresh invia il framebuffer al display
func (d *Display) Refresh() error {
	// Imposta finestra di scrittura (tutto il display)
	if err := d.writeCmd([]byte{cmdColumnAddr, 0, 127}); err != nil {
		return err
	}
	if err := d.writeCmd([]byte{cmdPageAddr, 0, 7}); err != nil {
		return err
	}

	// Invia framebuffer
	return d.writeData(d.fb)
}

// Close chiude la connessione al display
func (d *Display) Close() error {
	d.Off()
	return nil
}

// FontSize rappresenta la dimensione del font
type FontSize int

const (
	FontSmall  FontSize = 0
	FontMedium FontSize = 1
)

// Glyph rappresenta un carattere bitmap
type Glyph struct {
	Width  int
	Height int
	Data   []byte
}

// Font piccolo 5x7 (variabile width)
var fontSmall = map[rune]Glyph{
	' ': {Width: 3, Height: 7, Data: []byte{0x00, 0x00, 0x00}},
	'!': {Width: 1, Height: 7, Data: []byte{0x5F}},
	'0': {Width: 5, Height: 7, Data: []byte{0x3E, 0x51, 0x49, 0x45, 0x3E}},
	'1': {Width: 3, Height: 7, Data: []byte{0x00, 0x42, 0x7F, 0x40, 0x00}},
	'2': {Width: 5, Height: 7, Data: []byte{0x42, 0x61, 0x51, 0x49, 0x46}},
	'3': {Width: 5, Height: 7, Data: []byte{0x21, 0x41, 0x45, 0x4B, 0x31}},
	'4': {Width: 5, Height: 7, Data: []byte{0x18, 0x14, 0x12, 0x7F, 0x10}},
	'5': {Width: 5, Height: 7, Data: []byte{0x27, 0x45, 0x45, 0x45, 0x39}},
	'6': {Width: 5, Height: 7, Data: []byte{0x3C, 0x4A, 0x49, 0x49, 0x30}},
	'7': {Width: 5, Height: 7, Data: []byte{0x01, 0x71, 0x09, 0x05, 0x03}},
	'8': {Width: 5, Height: 7, Data: []byte{0x36, 0x49, 0x49, 0x49, 0x36}},
	'9': {Width: 5, Height: 7, Data: []byte{0x06, 0x49, 0x49, 0x29, 0x1E}},
	'A': {Width: 5, Height: 7, Data: []byte{0x7E, 0x11, 0x11, 0x11, 0x7E}},
	'B': {Width: 5, Height: 7, Data: []byte{0x7F, 0x49, 0x49, 0x49, 0x36}},
	'C': {Width: 5, Height: 7, Data: []byte{0x3E, 0x41, 0x41, 0x41, 0x22}},
	'D': {Width: 5, Height: 7, Data: []byte{0x7F, 0x41, 0x41, 0x22, 0x1C}},
	'E': {Width: 5, Height: 7, Data: []byte{0x7F, 0x49, 0x49, 0x49, 0x41}},
	'F': {Width: 5, Height: 7, Data: []byte{0x7F, 0x09, 0x09, 0x09, 0x01}},
	'G': {Width: 5, Height: 7, Data: []byte{0x3E, 0x41, 0x49, 0x49, 0x7A}},
	'H': {Width: 5, Height: 7, Data: []byte{0x7F, 0x08, 0x08, 0x08, 0x7F}},
	'I': {Width: 3, Height: 7, Data: []byte{0x00, 0x41, 0x7F, 0x41, 0x00}},
	'J': {Width: 5, Height: 7, Data: []byte{0x20, 0x40, 0x41, 0x3F, 0x01}},
	'K': {Width: 5, Height: 7, Data: []byte{0x7F, 0x08, 0x14, 0x22, 0x41}},
	'L': {Width: 5, Height: 7, Data: []byte{0x7F, 0x40, 0x40, 0x40, 0x40}},
	'M': {Width: 5, Height: 7, Data: []byte{0x7F, 0x02, 0x0C, 0x02, 0x7F}},
	'N': {Width: 5, Height: 7, Data: []byte{0x7F, 0x04, 0x08, 0x10, 0x7F}},
	'O': {Width: 5, Height: 7, Data: []byte{0x3E, 0x41, 0x41, 0x41, 0x3E}},
	'P': {Width: 5, Height: 7, Data: []byte{0x7F, 0x09, 0x09, 0x09, 0x06}},
	'Q': {Width: 5, Height: 7, Data: []byte{0x3E, 0x41, 0x51, 0x21, 0x5E}},
	'R': {Width: 5, Height: 7, Data: []byte{0x7F, 0x09, 0x19, 0x29, 0x46}},
	'S': {Width: 5, Height: 7, Data: []byte{0x46, 0x49, 0x49, 0x49, 0x31}},
	'T': {Width: 5, Height: 7, Data: []byte{0x01, 0x01, 0x7F, 0x01, 0x01}},
	'U': {Width: 5, Height: 7, Data: []byte{0x3F, 0x40, 0x40, 0x40, 0x3F}},
	'V': {Width: 5, Height: 7, Data: []byte{0x1F, 0x20, 0x40, 0x20, 0x1F}},
	'W': {Width: 5, Height: 7, Data: []byte{0x3F, 0x40, 0x38, 0x40, 0x3F}},
	'X': {Width: 5, Height: 7, Data: []byte{0x63, 0x14, 0x08, 0x14, 0x63}},
	'Y': {Width: 5, Height: 7, Data: []byte{0x07, 0x08, 0x70, 0x08, 0x07}},
	'Z': {Width: 5, Height: 7, Data: []byte{0x61, 0x51, 0x49, 0x45, 0x43}},
	'a': {Width: 5, Height: 7, Data: []byte{0x20, 0x54, 0x54, 0x54, 0x78}},
	'b': {Width: 5, Height: 7, Data: []byte{0x7F, 0x48, 0x44, 0x44, 0x38}},
	'c': {Width: 4, Height: 7, Data: []byte{0x38, 0x44, 0x44, 0x44, 0x20}},
	'd': {Width: 5, Height: 7, Data: []byte{0x38, 0x44, 0x44, 0x48, 0x7F}},
	'e': {Width: 5, Height: 7, Data: []byte{0x38, 0x54, 0x54, 0x54, 0x18}},
	'f': {Width: 4, Height: 7, Data: []byte{0x08, 0x7E, 0x09, 0x01, 0x02}},
	'g': {Width: 5, Height: 7, Data: []byte{0x0C, 0x52, 0x52, 0x52, 0x3E}},
	'h': {Width: 5, Height: 7, Data: []byte{0x7F, 0x08, 0x04, 0x04, 0x78}},
	'i': {Width: 1, Height: 7, Data: []byte{0x7D}},
	'j': {Width: 4, Height: 7, Data: []byte{0x40, 0x80, 0x84, 0x7D, 0x00}},
	'k': {Width: 4, Height: 7, Data: []byte{0x7F, 0x10, 0x28, 0x44, 0x00}},
	'l': {Width: 3, Height: 7, Data: []byte{0x00, 0x41, 0x7F, 0x40, 0x00}},
	'm': {Width: 5, Height: 7, Data: []byte{0x7C, 0x04, 0x18, 0x04, 0x78}},
	'n': {Width: 5, Height: 7, Data: []byte{0x7C, 0x08, 0x04, 0x04, 0x78}},
	'o': {Width: 5, Height: 7, Data: []byte{0x38, 0x44, 0x44, 0x44, 0x38}},
	'p': {Width: 5, Height: 7, Data: []byte{0xFC, 0x24, 0x24, 0x24, 0x18}},
	'q': {Width: 5, Height: 7, Data: []byte{0x18, 0x24, 0x24, 0x18, 0xFC}},
	'r': {Width: 5, Height: 7, Data: []byte{0x7C, 0x08, 0x04, 0x04, 0x08}},
	's': {Width: 5, Height: 7, Data: []byte{0x48, 0x54, 0x54, 0x54, 0x20}},
	't': {Width: 4, Height: 7, Data: []byte{0x04, 0x3F, 0x44, 0x40, 0x20}},
	'u': {Width: 5, Height: 7, Data: []byte{0x3C, 0x40, 0x40, 0x20, 0x7C}},
	'v': {Width: 5, Height: 7, Data: []byte{0x1C, 0x20, 0x40, 0x20, 0x1C}},
	'w': {Width: 5, Height: 7, Data: []byte{0x3C, 0x40, 0x30, 0x40, 0x3C}},
	'x': {Width: 5, Height: 7, Data: []byte{0x44, 0x28, 0x10, 0x28, 0x44}},
	'y': {Width: 5, Height: 7, Data: []byte{0x0C, 0x50, 0x50, 0x50, 0x3C}},
	'z': {Width: 5, Height: 7, Data: []byte{0x44, 0x64, 0x54, 0x4C, 0x44}},
	'.': {Width: 2, Height: 7, Data: []byte{0x00, 0x60, 0x60, 0x00}},
	',': {Width: 2, Height: 7, Data: []byte{0x00, 0x80, 0x60, 0x00}},
	':': {Width: 2, Height: 7, Data: []byte{0x00, 0x36, 0x36, 0x00}},
	';': {Width: 2, Height: 7, Data: []byte{0x00, 0x80, 0x36, 0x00}},
	'-': {Width: 4, Height: 7, Data: []byte{0x08, 0x08, 0x08, 0x08}},
	'+': {Width: 5, Height: 7, Data: []byte{0x08, 0x08, 0x3E, 0x08, 0x08}},
	'=': {Width: 5, Height: 7, Data: []byte{0x14, 0x14, 0x14, 0x14, 0x14}},
	'/': {Width: 5, Height: 7, Data: []byte{0x60, 0x10, 0x08, 0x04, 0x03}},
	'(': {Width: 3, Height: 7, Data: []byte{0x00, 0x1C, 0x22, 0x41, 0x00}},
	')': {Width: 3, Height: 7, Data: []byte{0x00, 0x41, 0x22, 0x1C, 0x00}},
	'?': {Width: 5, Height: 7, Data: []byte{0x02, 0x01, 0x51, 0x09, 0x06}},
}

var fontMedium = map[rune]Glyph{
	' ': {Width: 5, Height: 12, Data: []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
	'!': {Width: 2, Height: 12, Data: []byte{0xFC, 0x07, 0xFC, 0x07}},
	'0': {Width: 7, Height: 12, Data: []byte{0xF8, 0x03, 0x04, 0x04, 0x02, 0x08, 0x02, 0x08, 0x04, 0x04, 0xF8, 0x03, 0xF8, 0x03}},
	'1': {Width: 5, Height: 12, Data: []byte{0x00, 0x00, 0x08, 0x04, 0xFE, 0x0F, 0x00, 0x04, 0x00, 0x00}},
	'2': {Width: 7, Height: 12, Data: []byte{0x08, 0x04, 0x04, 0x08, 0x02, 0x09, 0x02, 0x06, 0x04, 0x04, 0xF8, 0x04}},
	'3': {Width: 7, Height: 12, Data: []byte{0x08, 0x02, 0x04, 0x04, 0x22, 0x08, 0x22, 0x08, 0x52, 0x04, 0x8C, 0x03}},
	'4': {Width: 7, Height: 12, Data: []byte{0xC0, 0x00, 0x20, 0x01, 0x18, 0x01, 0x04, 0x01, 0xFE, 0x0F, 0x00, 0x01}},
	'5': {Width: 7, Height: 12, Data: []byte{0xFC, 0x02, 0x24, 0x04, 0x22, 0x08, 0x22, 0x08, 0x42, 0x04, 0x82, 0x03}},
	'6': {Width: 7, Height: 12, Data: []byte{0xF0, 0x03, 0x48, 0x04, 0x24, 0x08, 0x22, 0x08, 0x42, 0x04, 0x80, 0x03}},
	'7': {Width: 7, Height: 12, Data: []byte{0x02, 0x00, 0x02, 0x00, 0x02, 0x0C, 0xC2, 0x03, 0x32, 0x00, 0x0E, 0x00}},
	'8': {Width: 7, Height: 12, Data: []byte{0x9C, 0x03, 0x62, 0x04, 0x22, 0x08, 0x22, 0x08, 0x62, 0x04, 0x9C, 0x03}},
	'9': {Width: 7, Height: 12, Data: []byte{0xF8, 0x00, 0x44, 0x01, 0x22, 0x02, 0x22, 0x02, 0x44, 0x01, 0xF8, 0x00}},
	'A': {Width: 7, Height: 12, Data: []byte{0x00, 0x04, 0xC0, 0x03, 0x38, 0x01, 0x38, 0x01, 0xC0, 0x03, 0x00, 0x04, 0x00, 0x0F}},
	'B': {Width: 7, Height: 12, Data: []byte{0xFE, 0x0F, 0x22, 0x08, 0x22, 0x08, 0x22, 0x08, 0x62, 0x04, 0x9C, 0x03}},
	'C': {Width: 7, Height: 12, Data: []byte{0xF8, 0x03, 0x04, 0x04, 0x02, 0x08, 0x02, 0x08, 0x02, 0x08, 0x04, 0x04}},
	'D': {Width: 7, Height: 12, Data: []byte{0xFE, 0x0F, 0x02, 0x08, 0x02, 0x08, 0x02, 0x08, 0x04, 0x04, 0xF8, 0x03}},
	'E': {Width: 7, Height: 12, Data: []byte{0xFE, 0x0F, 0x22, 0x08, 0x22, 0x08, 0x22, 0x08, 0x22, 0x08, 0x02, 0x08}},
	'F': {Width: 7, Height: 12, Data: []byte{0xFE, 0x0F, 0x22, 0x00, 0x22, 0x00, 0x22, 0x00, 0x22, 0x00, 0x02, 0x00}},
	'G': {Width: 7, Height: 12, Data: []byte{0xF8, 0x03, 0x04, 0x04, 0x02, 0x08, 0x22, 0x08, 0x22, 0x08, 0xE4, 0x0F}},
	'H': {Width: 7, Height: 12, Data: []byte{0xFE, 0x0F, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0xFE, 0x0F}},
	'I': {Width: 3, Height: 12, Data: []byte{0x02, 0x08, 0xFE, 0x0F, 0x02, 0x08}},
	'J': {Width: 7, Height: 12, Data: []byte{0x00, 0x06, 0x00, 0x08, 0x02, 0x08, 0x02, 0x08, 0xFE, 0x07, 0x00, 0x00}},
	'K': {Width: 7, Height: 12, Data: []byte{0xFE, 0x0F, 0x20, 0x00, 0x50, 0x00, 0x88, 0x00, 0x04, 0x01, 0x02, 0x0E}},
	'L': {Width: 7, Height: 12, Data: []byte{0xFE, 0x0F, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08}},
	'M': {Width: 7, Height: 12, Data: []byte{0xFE, 0x0F, 0x0C, 0x00, 0x70, 0x00, 0x70, 0x00, 0x0C, 0x00, 0xFE, 0x0F}},
	'N': {Width: 7, Height: 12, Data: []byte{0xFE, 0x0F, 0x04, 0x00, 0x18, 0x00, 0x60, 0x00, 0x80, 0x01, 0xFE, 0x0F}},
	'O': {Width: 7, Height: 12, Data: []byte{0xF8, 0x03, 0x04, 0x04, 0x02, 0x08, 0x02, 0x08, 0x04, 0x04, 0xF8, 0x03}},
	'P': {Width: 7, Height: 12, Data: []byte{0xFE, 0x0F, 0x22, 0x00, 0x22, 0x00, 0x22, 0x00, 0x22, 0x00, 0x1C, 0x00}},
	'Q': {Width: 7, Height: 12, Data: []byte{0xF8, 0x03, 0x04, 0x04, 0x02, 0x08, 0x02, 0x18, 0x04, 0x24, 0xF8, 0x23}},
	'R': {Width: 7, Height: 12, Data: []byte{0xFE, 0x0F, 0x22, 0x00, 0x22, 0x00, 0x22, 0x00, 0x62, 0x00, 0x9C, 0x0F}},
	'S': {Width: 7, Height: 12, Data: []byte{0x1C, 0x04, 0x22, 0x04, 0x22, 0x08, 0x22, 0x08, 0x42, 0x04, 0x8C, 0x03}},
	'T': {Width: 7, Height: 12, Data: []byte{0x02, 0x00, 0x02, 0x00, 0xFE, 0x0F, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00}},
	'U': {Width: 7, Height: 12, Data: []byte{0xFE, 0x03, 0x00, 0x04, 0x00, 0x08, 0x00, 0x08, 0x00, 0x04, 0xFE, 0x03}},
	'V': {Width: 7, Height: 12, Data: []byte{0x0E, 0x00, 0x70, 0x00, 0x80, 0x07, 0x80, 0x07, 0x70, 0x00, 0x0E, 0x00}},
	'W': {Width: 7, Height: 12, Data: []byte{0xFE, 0x03, 0x00, 0x0C, 0x00, 0x03, 0x00, 0x03, 0x00, 0x0C, 0xFE, 0x03}},
	'X': {Width: 7, Height: 12, Data: []byte{0x06, 0x0C, 0x18, 0x03, 0xE0, 0x00, 0xE0, 0x00, 0x18, 0x03, 0x06, 0x0C}},
	'Y': {Width: 7, Height: 12, Data: []byte{0x06, 0x00, 0x18, 0x00, 0xE0, 0x0F, 0xE0, 0x0F, 0x18, 0x00, 0x06, 0x00}},
	'Z': {Width: 7, Height: 12, Data: []byte{0x02, 0x0C, 0x02, 0x0B, 0x82, 0x08, 0x62, 0x08, 0x1A, 0x08, 0x06, 0x08}},
	'a': {Width: 6, Height: 12, Data: []byte{0x00, 0x03, 0x90, 0x04, 0x90, 0x08, 0x90, 0x08, 0xE0, 0x0F, 0x00, 0x08}},
	'b': {Width: 6, Height: 12, Data: []byte{0xFE, 0x0F, 0x10, 0x04, 0x10, 0x08, 0x10, 0x08, 0xE0, 0x07, 0x00, 0x00}},
	'c': {Width: 6, Height: 12, Data: []byte{0xE0, 0x07, 0x10, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x08, 0x20, 0x04}},
	'd': {Width: 6, Height: 12, Data: []byte{0xE0, 0x07, 0x10, 0x08, 0x10, 0x08, 0x10, 0x04, 0xFE, 0x0F, 0x00, 0x08}},
	'e': {Width: 6, Height: 12, Data: []byte{0xE0, 0x07, 0x90, 0x08, 0x90, 0x08, 0x90, 0x08, 0x90, 0x08, 0xE0, 0x04}},
	'f': {Width: 5, Height: 12, Data: []byte{0x10, 0x00, 0xFC, 0x0F, 0x12, 0x00, 0x12, 0x00, 0x12, 0x00}},
	'g': {Width: 6, Height: 12, Data: []byte{0xE0, 0x27, 0x10, 0x48, 0x10, 0x48, 0x10, 0x48, 0xF0, 0x3F, 0x00, 0x00}},
	'h': {Width: 6, Height: 12, Data: []byte{0xFE, 0x0F, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0xE0, 0x0F, 0x00, 0x08}},
	'i': {Width: 2, Height: 12, Data: []byte{0xF4, 0x0F, 0x00, 0x08}},
	'j': {Width: 4, Height: 12, Data: []byte{0x00, 0x40, 0x00, 0x80, 0x10, 0x80, 0xF4, 0x7F}},
	'k': {Width: 6, Height: 12, Data: []byte{0xFE, 0x0F, 0x80, 0x00, 0x40, 0x01, 0xA0, 0x02, 0x10, 0x0C, 0x00, 0x08}},
	'l': {Width: 3, Height: 12, Data: []byte{0x02, 0x00, 0xFE, 0x0F, 0x00, 0x08}},
	'm': {Width: 7, Height: 12, Data: []byte{0xF0, 0x0F, 0x10, 0x00, 0x10, 0x00, 0xF0, 0x0F, 0x10, 0x00, 0xE0, 0x0F, 0x00, 0x08}},
	'n': {Width: 6, Height: 12, Data: []byte{0xF0, 0x0F, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0xE0, 0x0F, 0x00, 0x08}},
	'o': {Width: 6, Height: 12, Data: []byte{0xE0, 0x07, 0x10, 0x08, 0x10, 0x08, 0x10, 0x08, 0xE0, 0x07, 0x00, 0x00}},
	'p': {Width: 6, Height: 12, Data: []byte{0xF0, 0xFF, 0x10, 0x04, 0x10, 0x08, 0x10, 0x08, 0xE0, 0x07, 0x00, 0x00}},
	'q': {Width: 6, Height: 12, Data: []byte{0xE0, 0x07, 0x10, 0x08, 0x10, 0x08, 0x10, 0x04, 0xF0, 0xFF, 0x00, 0x00}},
	'r': {Width: 5, Height: 12, Data: []byte{0xF0, 0x0F, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00}},
	's': {Width: 6, Height: 12, Data: []byte{0x60, 0x04, 0x90, 0x08, 0x90, 0x08, 0x90, 0x08, 0x20, 0x07, 0x00, 0x00}},
	't': {Width: 5, Height: 12, Data: []byte{0x10, 0x00, 0xFC, 0x07, 0x10, 0x08, 0x10, 0x08, 0x10, 0x08}},
	'u': {Width: 6, Height: 12, Data: []byte{0xF0, 0x07, 0x00, 0x08, 0x00, 0x08, 0x00, 0x04, 0xF0, 0x0F, 0x00, 0x08}},
	'v': {Width: 6, Height: 12, Data: []byte{0x30, 0x00, 0xC0, 0x00, 0x00, 0x0F, 0x00, 0x0F, 0xC0, 0x00, 0x30, 0x00}},
	'w': {Width: 7, Height: 12, Data: []byte{0xF0, 0x07, 0x00, 0x08, 0x00, 0x07, 0x00, 0x07, 0x00, 0x08, 0xF0, 0x07}},
	'x': {Width: 6, Height: 12, Data: []byte{0x10, 0x08, 0x60, 0x06, 0x80, 0x01, 0x80, 0x01, 0x60, 0x06, 0x10, 0x08}},
	'y': {Width: 6, Height: 12, Data: []byte{0x30, 0x00, 0xC0, 0x40, 0x00, 0x3F, 0x00, 0x0F, 0xC0, 0x00, 0x30, 0x00}},
	'z': {Width: 6, Height: 12, Data: []byte{0x10, 0x0C, 0x10, 0x0B, 0x90, 0x08, 0x50, 0x08, 0x30, 0x08, 0x10, 0x08}},
	'.': {Width: 2, Height: 12, Data: []byte{0x00, 0x0C, 0x00, 0x0C}},
	',': {Width: 2, Height: 12, Data: []byte{0x00, 0x1C, 0x00, 0x0C}},
	':': {Width: 2, Height: 12, Data: []byte{0x20, 0x06, 0x20, 0x06}},
	';': {Width: 2, Height: 12, Data: []byte{0x20, 0x16, 0x20, 0x06}},
	'-': {Width: 5, Height: 12, Data: []byte{0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00}},
	'+': {Width: 7, Height: 12, Data: []byte{0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0xF8, 0x01, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00}},
	'=': {Width: 6, Height: 12, Data: []byte{0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00}},
	'/': {Width: 6, Height: 12, Data: []byte{0x00, 0x0C, 0x00, 0x03, 0xC0, 0x00, 0x30, 0x00, 0x0C, 0x00, 0x03, 0x00}},
	'(': {Width: 4, Height: 12, Data: []byte{0xF0, 0x01, 0x0C, 0x06, 0x02, 0x08, 0x02, 0x08}},
	')': {Width: 4, Height: 12, Data: []byte{0x02, 0x08, 0x02, 0x08, 0x0C, 0x06, 0xF0, 0x01}},
	'?': {Width: 6, Height: 12, Data: []byte{0x04, 0x00, 0x02, 0x00, 0x02, 0x0D, 0x92, 0x00, 0x4C, 0x00, 0x38, 0x00}}}

// drawGlyph disegna un singolo carattere
func (d *Display) drawGlyph(x, y int, g Glyph, on bool) int {
	for col := 0; col < g.Width; col++ {
		// Per altezze > 8, i dati sono organizzati in piÃ¹ byte per colonna
		bytesPerCol := (g.Height + 7) / 8
		for byteIdx := 0; byteIdx < bytesPerCol; byteIdx++ {
			dataIdx := col*bytesPerCol + byteIdx
			if dataIdx >= len(g.Data) {
				continue
			}

			dataByte := g.Data[dataIdx]
			for bit := 0; bit < 8 && (byteIdx*8+bit) < g.Height; bit++ {
				if dataByte&(1<<uint(bit)) != 0 {
					d.SetPixel(x+col, y+byteIdx*8+bit, on)
				}
			}
		}
	}
	return g.Width + 1 // Ritorna larghezza + spaziatura
}

// DrawString disegna una stringa alle coordinate specificate
func (d *Display) DrawString(x, y int, text string, size FontSize) {
	font := fontSmall
	if size == FontMedium {
		font = fontMedium
	}

	xPos := x
	for _, ch := range text {
		if glyph, ok := font[ch]; ok {
			xPos += d.drawGlyph(xPos, y, glyph, true)
		} else {
			// Carattere non trovato, usa spazio
			xPos += 4
		}

		// Wrap automatico
		if xPos >= DisplayWidth {
			break
		}
	}
}

// Print stampa testo alla posizione del cursore
func (d *Display) Print(text string, size FontSize) {
	font := fontSmall
	lineHeight := 9
	if size == FontMedium {
		font = fontMedium
		lineHeight = 13
	}

	for _, ch := range text {
		if ch == '\n' {
			d.cursorX = 0
			d.cursorY += lineHeight
			continue
		}

		if glyph, ok := font[ch]; ok {
			// Wrap automatico
			if d.cursorX+glyph.Width >= DisplayWidth {
				d.cursorX = 0
				d.cursorY += lineHeight
			}

			// Controlla overflow verticale
			if d.cursorY+lineHeight > DisplayHeight {
				d.cursorY = 0 // Torna all'inizio
			}

			d.cursorX += d.drawGlyph(d.cursorX, d.cursorY, glyph, true)
		} else {
			d.cursorX += 4
		}
	}
}

// Println stampa testo con newline alla fine
func (d *Display) Println(text string, size FontSize) {
	d.Print(text+"\n", size)
}

// SetCursor imposta la posizione del cursore per Print
func (d *Display) SetCursor(x, y int) {
	d.cursorX = x
	d.cursorY = y
}

// GetCursor ritorna la posizione attuale del cursore
func (d *Display) GetCursor() (int, int) {
	return d.cursorX, d.cursorY
}
